membangun RESTful API untuk aplikasi catatan sederhana
Aplikasi tersebut berfungsi untuk menyimpan (create), melihat (read), mengubah (update), dan menghapus (delete) catatan
Fungsionalitas ini dikenal sebagai operasi CRUD.

Dari segi Front-End (client)
Anda dapat mengaksesnya melalui tautan ini: http://notesapp-v1.dicodingacademy.com/.

Namun ketika Anda mengaksesnya, aplikasi tersebut belum bisa digunakan
aplikasi tersebut akan berfungsi dengan baik ketika Anda sudah membuat RESTful API sesuai dengan kriteria yang dibutuhkan

Kriteria 1 - Web Server dapat menyimpan catatan
    Kriteria pertama adalah web server dapat menyimpan catatan yang ditambahkan melalui aplikasi web
    Cukup simpan pada memory server dalam bentuk array JavaScript
        >   struktur dari objek catatan yang perlu disimpan oleh server:
            {
                id: string,
                title: string,
                createdAt: string,
                updatedAt: string,
                tags: array of string,
                body: string,
            },

Agar web server dapat menyimpan catatan melalui aplikasi client, web server harus menyediakan route dengan path ‘/notes’ dan method POST

client akan mengirimkan permintaan ke path dan method tersebut dengan membawa data JSON berikut pada request body:
            {
                "title": "Judul Catatan",
                "tags": ["Tag 1", "Tag 2"],
                "body": "Konten catatan"
            }

Jika permintaan client berhasil dilakukan, respons dari server harus memiliki status code 201 (created) dan mengembalikan data dalam bentuk JSON dengan format berikut
            {
                "status": "success",
                "message": "Catatan berhasil ditambahkan",
                "data": {
                    "noteId": "V09YExygSUYogwWJ"
                }
            }

Bila permintaan gagal dilakukan, berikan status code 500 dan kembalikan dengan data JSON dengan format berikut
            {
                "status": "error",
                "message": "Catatan gagal untuk ditambahkan"
            }

Kriteria 2 - Web Server dapat menampilkan catatan
    Ketika client melakukan permintaan pada path ‘/notes’ dengan method ‘GET’, maka server harus mengembalikan status code 200 (ok) serta seluruh data notes dalam bentuk array menggunakan JSON
    
    Jika belum ada catatan satu pun pada array, server bisa mengembalikan data notes dengan nilai array kosong seperti ini
            {
                "status": "success",
                "data": {
                    "notes": []
                }
            }

Kriteria 3 - Web Server dapat mengubah catatan
    Ketika client meminta perubahan catatan, ia akan membuat permintaan ke path ‘/notes/{id}’, menggunakan method ‘PUT’, serta membawa data JSON pada body request yang merupakan data catatan terbaru

    Jika perubahan data berhasil dilakukan, server harus menanggapi dengan status code 200 (ok) dan membawa data JSON objek berikut pada body respons
            {
                "status": "success",
                "message": "Catatan berhasil diperbaharui"
            }
    Bila id catatan tidak ditemukan, maka server harus merespons dengan status code 404 (not found)
            {
                "status": "fail",
                "message": "Gagal memperbarui catatan. Id catatan tidak ditemukan"
            }

Kriteria 4 - Web Server dapat menghapus catatan
    client akan membuat permintaan pada path ‘/notes/{id}’ dengan method ‘DELETE’. Ketika permintaan tersebut berhasil, maka server harus mengembalikan status code 200 (ok) serta data JSON berikut
            {
                "status": "success",
                "message": "Catatan berhasil dihapus"
            }
    
    Catatan yang dihapus harus sesuai dengan id catatan yang digunakan client pada path parameter. Bila id catatan tidak ditemukan, maka server harus mengembalikan respons dengan status code 404 dan membawa data JSON berikut
            {
                "status": "fail",
                "message": "Catatan gagal dihapus. Id catatan tidak ditemukan"
            }